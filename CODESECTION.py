# -*- coding: utf-8 -*-
"""NAANMUTHALVAN.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/13nRnoZ4HF8Gjd39Q5dl5M2oBV-dnvMiR
"""

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import classification_report, accuracy_score, confusion_matrix, roc_curve, roc_auc_score
from sklearn.preprocessing import StandardScaler
from sklearn.decomposition import PCA
from pandas.plotting import scatter_matrix, parallel_coordinates
from mpl_toolkits.mplot3d import Axes3D

sns.set(style='whitegrid', palette='pastel', font_scale=1.1)

data = {
    'MonthlyCharges': [29.85, 56.95, 53.85, 42.30, 70.70, 99.65, 89.10, 65.80],
    'Tenure': [1, 34, 2, 45, 5, 10, 3, 12],
    'ContractType': [0, 1, 0, 1, 0, 1, 0, 1],
    'Churn': [1, 0, 1, 0, 1, 0, 1, 0]
}

df = pd.DataFrame(data)
X = df[['MonthlyCharges', 'Tenure', 'ContractType']]
y = df['Churn']
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)
X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.25, random_state=42)
model = DecisionTreeClassifier(criterion='entropy', max_depth=3, random_state=42)
model.fit(X_train, y_train)
y_pred = model.predict(X_test)
y_prob = model.predict_proba(X_test)[:, 1]
print("Accuracy:", accuracy_score(y_test, y_pred))
print(classification_report(y_test, y_pred))

cm = confusion_matrix(y_test, y_pred)
sns.heatmap(cm, annot=True, fmt='d', cmap='YlGnBu', xticklabels=['Stayed', 'Churned'], yticklabels=['Stayed', 'Churned'])
plt.title('Confusion Matrix')
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.show()

fpr, tpr, _ = roc_curve(y_test, y_prob)
roc_auc = roc_auc_score(y_test, y_prob)
plt.figure(figsize=(8, 5))
plt.plot(fpr, tpr, label=f'AUC = {roc_auc:.2f}', color='navy')
plt.plot([0, 1], [0, 1], linestyle='--', color='gray')
plt.xlabel('False Positive Rate')
plt.ylabel('True Positive Rate')
plt.title('ROC Curve')
plt.legend()
plt.show()




feature_importance = pd.DataFrame({'Feature': X.columns, 'Importance': model.feature_importances_}).sort_values(by='Importance', ascending=False)
sns.barplot(data=feature_importance, x='Importance', y='Feature', palette='coolwarm')
plt.title('Feature Importance')
plt.show()

sns.pairplot(df, hue='Churn', palette='husl')
plt.show()

plt.figure(figsize=(10, 6))
sns.histplot(data=df, x='MonthlyCharges', hue='Churn', kde=True, multiple='stack')
plt.title('Monthly Charges Distribution by Churn')
plt.show()

plt.figure(figsize=(10, 6))
sns.histplot(data=df, x='Tenure', hue='Churn', kde=True, multiple='stack')
plt.title('Tenure Distribution by Churn')
plt.show()

plt.figure(figsize=(8, 5))
sns.kdeplot(data=df, x='MonthlyCharges', hue='Churn', fill=True, alpha=0.6)
plt.title('KDE - Monthly Charges by Churn')
plt.show()

plt.figure(figsize=(8, 5))
sns.kdeplot(data=df, x='Tenure', hue='Churn', fill=True, alpha=0.6)
plt.title('KDE - Tenure by Churn')
plt.show()

sns.violinplot(data=df, x='Churn', y='MonthlyCharges', palette='muted')
plt.title('Violin Plot - Monthly Charges')
plt.show()

sns.violinplot(data=df, x='Churn', y='Tenure', palette='pastel')
plt.title('Violin Plot - Tenure')
plt.show()

sns.swarmplot(data=df, x='Churn', y='MonthlyCharges', palette='Set1')
plt.title('Swarm Plot - Monthly Charges')
plt.show()

sns.boxplot(data=df, x='Churn', y='MonthlyCharges', palette='Set2')
plt.title('Box Plot - Monthly Charges by Churn')
plt.show()

plt.figure(figsize=(8, 5))
sns.heatmap(df.corr(), annot=True, cmap='coolwarm', linewidths=0.5)
plt.title('Correlation Matrix')
plt.show()

fig = plt.figure(figsize=(8, 6))
ax = fig.add_subplot(111, projection='3d')
ax.scatter(df['MonthlyCharges'], df['Tenure'], df['ContractType'], c=df['Churn'], cmap='coolwarm', s=100)
ax.set_xlabel('MonthlyCharges')
ax.set_ylabel('Tenure')
ax.set_zlabel('ContractType')
plt.title('3D Scatter Plot by Churn')
plt.show()

df_scaled = pd.DataFrame(X_scaled, columns=X.columns)
df_scaled['Churn'] = y.values
plt.figure(figsize=(10, 6))
parallel_coordinates(df_scaled, class_column='Churn', colormap='coolwarm')
plt.title('Parallel Coordinates')
plt.show()

pca = PCA(n_components=2)
X_pca = pca.fit_transform(X_scaled)
plt.figure(figsize=(8, 6))
plt.scatter(X_pca[:, 0], X_pca[:, 1], c=y, cmap='coolwarm', s=100, edgecolor='k')
plt.title('PCA Projection')
plt.xlabel('PCA 1')
plt.ylabel('PCA 2')
plt.grid(True)
plt.show()

xx, yy = np.meshgrid(np.linspace(X_scaled[:, 0].min(), X_scaled[:, 0].max(), 100),
                     np.linspace(X_scaled[:, 1].min(), X_scaled[:, 1].max(), 100))
Z = model.predict(np.c_[xx.ravel(), yy.ravel(), np.zeros_like(xx.ravel())])
Z = Z.reshape(xx.shape)
plt.figure(figsize=(8, 6))
plt.contourf(xx, yy, Z, alpha=0.4, cmap='coolwarm')
plt.scatter(X_scaled[:, 0], X_scaled[:, 1], c=y, s=100, edgecolor='k', cmap='coolwarm')
plt.title('Decision Boundary (2D)')
plt.xlabel('MonthlyCharges (scaled)')
plt.ylabel('Tenure (scaled)')
plt.grid()
plt.show()